{"ast":null,"code":"import \"antd/lib/checkbox/style\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"antd/lib/auto-complete/style\";\nimport _AutoComplete from \"antd/lib/auto-complete\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar _jsxFileName = \"/Users/friday/web_dev/sir-shallum/components/clientComponents/registrationForms/SignUpForm.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport styled from \"styled-components\";\nconst FormItem = _Form.Item;\nconst Option = _Select.Option;\nconst AutoCompleteOption = _AutoComplete.Option;\nconst MainLayout = styled.div.withConfig({\n  displayName: \"SignUpForm__MainLayout\",\n  componentId: \"sy4mh2-0\"\n})([\"height:100%;padding:2%;h1{text-align:center;}\"]);\n\nclass SignUpForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      confirmDirty: false,\n      autoCompleteResult: []\n    });\n\n    _defineProperty(this, \"handleSubmit\", e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log(\"Received values of form: \", values);\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleConfirmBlur\", e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    });\n\n    _defineProperty(this, \"checkPassword\", (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue(\"password\")) {\n        callback(\"Two passwords that you enter is inconsistent!\");\n      } else {\n        callback();\n      }\n    });\n\n    _defineProperty(this, \"checkConfirm\", (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields([\"confirm\"], {\n          force: true\n        });\n      }\n\n      callback();\n    });\n  }\n\n  render() {\n    const {\n      getFieldDecorator\n    } = this.props.form;\n    const {\n      autoCompleteResult\n    } = this.state;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 6\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 14\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 14,\n          offset: 6\n        }\n      }\n    };\n    const prefixSelector = getFieldDecorator(\"prefix\", {\n      initialValue: \"+639\"\n    })(__jsx(_Select, {\n      style: {\n        width: 75\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, __jsx(Option, {\n      value: \"639\",\n      default: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"+639\")));\n    return __jsx(MainLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Sign Up\"), __jsx(_Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, __jsx(FormItem, _extends({}, formItemLayout, {\n      label: \"E-mail\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), getFieldDecorator(\"email\", {\n      rules: [{\n        type: \"email\",\n        message: \"The input is not valid E-mail!\"\n      }, {\n        required: true,\n        message: \"Please input your E-mail!\"\n      }]\n    })(__jsx(_Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }))), __jsx(FormItem, _extends({}, formItemLayout, {\n      label: __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Full Name\\xA0\"),\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), getFieldDecorator(\"fullName\", {\n      rules: [{\n        required: true,\n        message: \"Please input your Full Name!\",\n        whitespace: true\n      }]\n    })(__jsx(_Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }))), __jsx(FormItem, _extends({}, formItemLayout, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), getFieldDecorator(\"password\", {\n      rules: [{\n        required: true,\n        message: \"Please input your password!\"\n      }, {\n        validator: this.checkConfirm\n      }]\n    })(__jsx(_Input, {\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }))), __jsx(FormItem, _extends({}, formItemLayout, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), getFieldDecorator(\"confirm\", {\n      rules: [{\n        required: true,\n        message: \"Please confirm your password!\"\n      }, {\n        validator: this.checkPassword\n      }]\n    })(__jsx(_Input, {\n      type: \"password\",\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }))), __jsx(FormItem, _extends({}, formItemLayout, {\n      label: \"Phone Number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), getFieldDecorator(\"phone\", {\n      rules: [{\n        required: true,\n        message: \"Please input your phone number!\"\n      }]\n    })(__jsx(_Input, {\n      addonBefore: prefixSelector,\n      style: {\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }))), __jsx(FormItem, _extends({}, formItemLayout, {\n      label: __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Address\\xA0\"),\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), getFieldDecorator(\"address\", {\n      rules: [{\n        required: true,\n        message: \"Please input your Address\",\n        whitespace: true\n      }]\n    })(__jsx(_Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }))), __jsx(FormItem, _extends({}, formItemLayout, {\n      label: \"Captcha\",\n      extra: \"We must make sure that your are a human.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), __jsx(_Row, {\n      gutter: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, __jsx(_Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, getFieldDecorator(\"captcha\", {\n      rules: [{\n        required: true,\n        message: \"Please input the captcha you got!\"\n      }]\n    })(__jsx(_Input, {\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }))), __jsx(_Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, __jsx(_Button, {\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Get captcha\")))), __jsx(FormItem, _extends({}, tailFormItemLayout, {\n      style: {\n        marginBottom: 8\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), getFieldDecorator(\"agreement\", {\n      valuePropName: \"checked\"\n    })(__jsx(_Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"I have read the \", __jsx(\"a\", {\n      href: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"agreement\")))), __jsx(FormItem, _extends({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), __jsx(_Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Sign Up!\"))));\n  }\n\n}\n\nconst WrappedSignUpForm = _Form.create()(SignUpForm);\n\nexport default WrappedSignUpForm;","map":{"version":3,"sources":["/Users/friday/web_dev/sir-shallum/components/clientComponents/registrationForms/SignUpForm.js"],"names":["React","styled","FormItem","Item","Option","AutoCompleteOption","MainLayout","div","SignUpForm","Component","confirmDirty","autoCompleteResult","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","value","target","setState","state","rule","callback","getFieldValue","validateFields","force","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","width","handleSubmit","rules","type","message","required","whitespace","validator","checkConfirm","checkPassword","handleConfirmBlur","marginBottom","valuePropName","WrappedSignUpForm","create"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAcA,MAAMC,QAAQ,GAAG,MAAKC,IAAtB;AACA,MAAMC,MAAM,GAAG,QAAOA,MAAtB;AACA,MAAMC,kBAAkB,GAAG,cAAaD,MAAxC;AAEA,MAAME,UAAU,GAAGL,MAAM,CAACM,GAAV;AAAA;AAAA;AAAA,qDAAhB;;AAQA,MAAMC,UAAN,SAAyBR,KAAK,CAACS,SAA/B,CAAyC;AAAA;AAAA;;AAAA,mCAC/B;AACNC,MAAAA,YAAY,EAAE,KADR;AAENC,MAAAA,kBAAkB,EAAE;AAFd,KAD+B;;AAAA,0CAMxBC,CAAC,IAAI;AAClBA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKC,KAAL,CAAWC,IAAX,CAAgBC,uBAAhB,CAAwC,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACvD,YAAI,CAACD,GAAL,EAAU;AACRE,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,MAAzC;AACD;AACF,OAJD;AAKD,KAbsC;;AAAA,+CAenBN,CAAC,IAAI;AACvB,YAAMS,KAAK,GAAGT,CAAC,CAACU,MAAF,CAASD,KAAvB;AACA,WAAKE,QAAL,CAAc;AAAEb,QAAAA,YAAY,EAAE,KAAKc,KAAL,CAAWd,YAAX,IAA2B,CAAC,CAACW;AAA7C,OAAd;AACD,KAlBsC;;AAAA,2CAoBvB,CAACI,IAAD,EAAOJ,KAAP,EAAcK,QAAd,KAA2B;AACzC,YAAMX,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;;AACA,UAAIM,KAAK,IAAIA,KAAK,KAAKN,IAAI,CAACY,aAAL,CAAmB,UAAnB,CAAvB,EAAuD;AACrDD,QAAAA,QAAQ,CAAC,+CAAD,CAAR;AACD,OAFD,MAEO;AACLA,QAAAA,QAAQ;AACT;AACF,KA3BsC;;AAAA,0CA6BxB,CAACD,IAAD,EAAOJ,KAAP,EAAcK,QAAd,KAA2B;AACxC,YAAMX,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;;AACA,UAAIM,KAAK,IAAI,KAAKG,KAAL,CAAWd,YAAxB,EAAsC;AACpCK,QAAAA,IAAI,CAACa,cAAL,CAAoB,CAAC,SAAD,CAApB,EAAiC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAjC;AACD;;AACDH,MAAAA,QAAQ;AACT,KAnCsC;AAAA;;AAqCvCI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAwB,KAAKjB,KAAL,CAAWC,IAAzC;AACA,UAAM;AAAEJ,MAAAA;AAAF,QAAyB,KAAKa,KAApC;AACA,UAAMQ,cAAc,GAAG;AACrBC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,EAAE,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADI;AAERC,QAAAA,EAAE,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFI,OADW;AAKrBE,MAAAA,UAAU,EAAE;AACVH,QAAAA,EAAE,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADM;AAEVC,QAAAA,EAAE,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFM;AALS,KAAvB;AAUA,UAAMG,kBAAkB,GAAG;AACzBD,MAAAA,UAAU,EAAE;AACVH,QAAAA,EAAE,EAAE;AACFC,UAAAA,IAAI,EAAE,EADJ;AAEFI,UAAAA,MAAM,EAAE;AAFN,SADM;AAKVH,QAAAA,EAAE,EAAE;AACFD,UAAAA,IAAI,EAAE,EADJ;AAEFI,UAAAA,MAAM,EAAE;AAFN;AALM;AADa,KAA3B;AAYA,UAAMC,cAAc,GAAGT,iBAAiB,CAAC,QAAD,EAAW;AACjDU,MAAAA,YAAY,EAAE;AADmC,KAAX,CAAjB,CAGrB;AAAQ,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,KAAd;AAAoB,MAAA,OAAO,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CAHqB,CAAvB;AAUA,WACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAM,MAAA,QAAQ,EAAE,KAAKC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,QAAD,eAAcX,cAAd;AAA8B,MAAA,KAAK,EAAC,QAApC;AAA6C,MAAA,WAAW,MAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGD,iBAAiB,CAAC,OAAD,EAAU;AAC1Ba,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,IAAI,EAAE,OADR;AAEEC,QAAAA,OAAO,EAAE;AAFX,OADK,EAKL;AACEC,QAAAA,QAAQ,EAAE,IADZ;AAEED,QAAAA,OAAO,EAAE;AAFX,OALK;AADmB,KAAV,CAAjB,CAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADH,CADF,EAeE,MAAC,QAAD,eACMd,cADN;AAEE,MAAA,KAAK,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFT;AAGE,MAAA,WAAW,MAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKGD,iBAAiB,CAAC,UAAD,EAAa;AAC7Ba,MAAAA,KAAK,EAAE,CACL;AACEG,QAAAA,QAAQ,EAAE,IADZ;AAEED,QAAAA,OAAO,EAAE,8BAFX;AAGEE,QAAAA,UAAU,EAAE;AAHd,OADK;AADsB,KAAb,CAAjB,CAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CALH,CAfF,EA8BE,MAAC,QAAD,eAAchB,cAAd;AAA8B,MAAA,KAAK,EAAC,UAApC;AAA+C,MAAA,WAAW,MAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGD,iBAAiB,CAAC,UAAD,EAAa;AAC7Ba,MAAAA,KAAK,EAAE,CACL;AACEG,QAAAA,QAAQ,EAAE,IADZ;AAEED,QAAAA,OAAO,EAAE;AAFX,OADK,EAKL;AACEG,QAAAA,SAAS,EAAE,KAAKC;AADlB,OALK;AADsB,KAAb,CAAjB,CAUE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADH,CA9BF,EA2CE,MAAC,QAAD,eAAclB,cAAd;AAA8B,MAAA,KAAK,EAAC,kBAApC;AAAuD,MAAA,WAAW,MAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGD,iBAAiB,CAAC,SAAD,EAAY;AAC5Ba,MAAAA,KAAK,EAAE,CACL;AACEG,QAAAA,QAAQ,EAAE,IADZ;AAEED,QAAAA,OAAO,EAAE;AAFX,OADK,EAKL;AACEG,QAAAA,SAAS,EAAE,KAAKE;AADlB,OALK;AADqB,KAAZ,CAAjB,CAUE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,MAAM,EAAE,KAAKC,iBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADH,CA3CF,EAyDE,MAAC,QAAD,eAAcpB,cAAd;AAA8B,MAAA,KAAK,EAAC,cAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGD,iBAAiB,CAAC,OAAD,EAAU;AAC1Ba,MAAAA,KAAK,EAAE,CACL;AAAEG,QAAAA,QAAQ,EAAE,IAAZ;AAAkBD,QAAAA,OAAO,EAAE;AAA3B,OADK;AADmB,KAAV,CAAjB,CAKC;AAAO,MAAA,WAAW,EAAEN,cAApB;AAAoC,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALD,CADH,CAzDF,EAkEE,MAAC,QAAD,eACMV,cADN;AAEE,MAAA,KAAK,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFT;AAGE,MAAA,WAAW,MAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKGD,iBAAiB,CAAC,SAAD,EAAY;AAC5Ba,MAAAA,KAAK,EAAE,CACL;AACEG,QAAAA,QAAQ,EAAE,IADZ;AAEED,QAAAA,OAAO,EAAE,2BAFX;AAGEE,QAAAA,UAAU,EAAE;AAHd,OADK;AADqB,KAAZ,CAAjB,CAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CALH,CAlEF,EAiFE,MAAC,QAAD,eACMhB,cADN;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,KAAK,EAAC,0CAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKE;AAAK,MAAA,MAAM,EAAE,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,iBAAiB,CAAC,SAAD,EAAY;AAC5Ba,MAAAA,KAAK,EAAE,CACL;AACEG,QAAAA,QAAQ,EAAE,IADZ;AAEED,QAAAA,OAAO,EAAE;AAFX,OADK;AADqB,KAAZ,CAAjB,CAOE;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADH,CADF,EAWE;AAAK,MAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,IAAI,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CAXF,CALF,CAjFF,EAsGE,MAAC,QAAD,eAAcR,kBAAd;AAAkC,MAAA,KAAK,EAAE;AAAEe,QAAAA,YAAY,EAAE;AAAhB,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGtB,iBAAiB,CAAC,WAAD,EAAc;AAC9BuB,MAAAA,aAAa,EAAE;AADe,KAAd,CAAjB,CAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACkB;AAAG,MAAA,IAAI,EAAC,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADlB,CAHD,CADH,CAtGF,EA+GE,MAAC,QAAD,eAAchB,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACE;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAuB,MAAA,QAAQ,EAAC,QAAhC;AAAyC,MAAA,KAAK,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CA/GF,CAFF,CADF;AA0HD;;AAlMsC;;AAqMzC,MAAMiB,iBAAiB,GAAG,MAAKC,MAAL,GAAchD,UAAd,CAA1B;;AAEA,eAAe+C,iBAAf","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  Form,\n  Input,\n  Tooltip,\n  Icon,\n  Cascader,\n  Select,\n  Row,\n  Col,\n  Checkbox,\n  Button,\n  AutoComplete\n} from \"antd\";\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst AutoCompleteOption = AutoComplete.Option;\n\nconst MainLayout = styled.div`\n  height: 100%;\n  padding: 2%;\n  h1 {\n    text-align: center;\n  }\n`;\n\nclass SignUpForm extends React.Component {\n  state = {\n    confirmDirty: false,\n    autoCompleteResult: []\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        console.log(\"Received values of form: \", values);\n      }\n    });\n  };\n\n  handleConfirmBlur = e => {\n    const value = e.target.value;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  checkPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value !== form.getFieldValue(\"password\")) {\n      callback(\"Two passwords that you enter is inconsistent!\");\n    } else {\n      callback();\n    }\n  };\n\n  checkConfirm = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && this.state.confirmDirty) {\n      form.validateFields([\"confirm\"], { force: true });\n    }\n    callback();\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const { autoCompleteResult } = this.state;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 6 }\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 14 }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 14,\n          offset: 6\n        }\n      }\n    };\n    const prefixSelector = getFieldDecorator(\"prefix\", {\n      initialValue: \"+639\"\n    })(\n      <Select style={{ width: 75 }}>\n        <Option value=\"639\" default>\n          +639\n        </Option>\n      </Select>\n    );\n\n    return (\n      <MainLayout>\n        <h1>Sign Up</h1>\n        <Form onSubmit={this.handleSubmit}>\n          <FormItem {...formItemLayout} label=\"E-mail\" hasFeedback>\n            {getFieldDecorator(\"email\", {\n              rules: [\n                {\n                  type: \"email\",\n                  message: \"The input is not valid E-mail!\"\n                },\n                {\n                  required: true,\n                  message: \"Please input your E-mail!\"\n                }\n              ]\n            })(<Input />)}\n          </FormItem>\n          <FormItem\n            {...formItemLayout}\n            label={<span>Full Name&nbsp;</span>}\n            hasFeedback\n          >\n            {getFieldDecorator(\"fullName\", {\n              rules: [\n                {\n                  required: true,\n                  message: \"Please input your Full Name!\",\n                  whitespace: true\n                }\n              ]\n            })(<Input />)}\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"Password\" hasFeedback>\n            {getFieldDecorator(\"password\", {\n              rules: [\n                {\n                  required: true,\n                  message: \"Please input your password!\"\n                },\n                {\n                  validator: this.checkConfirm\n                }\n              ]\n            })(<Input type=\"password\" />)}\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"Confirm Password\" hasFeedback>\n            {getFieldDecorator(\"confirm\", {\n              rules: [\n                {\n                  required: true,\n                  message: \"Please confirm your password!\"\n                },\n                {\n                  validator: this.checkPassword\n                }\n              ]\n            })(<Input type=\"password\" onBlur={this.handleConfirmBlur} />)}\n          </FormItem>\n\n          <FormItem {...formItemLayout} label=\"Phone Number\">\n            {getFieldDecorator(\"phone\", {\n              rules: [\n                { required: true, message: \"Please input your phone number!\" }\n              ]\n            })(\n              <Input addonBefore={prefixSelector} style={{ width: \"100%\" }} />\n            )}\n          </FormItem>\n          <FormItem\n            {...formItemLayout}\n            label={<span>Address&nbsp;</span>}\n            hasFeedback\n          >\n            {getFieldDecorator(\"address\", {\n              rules: [\n                {\n                  required: true,\n                  message: \"Please input your Address\",\n                  whitespace: true\n                }\n              ]\n            })(<Input />)}\n          </FormItem>\n          <FormItem\n            {...formItemLayout}\n            label=\"Captcha\"\n            extra=\"We must make sure that your are a human.\"\n          >\n            <Row gutter={8}>\n              <Col span={12}>\n                {getFieldDecorator(\"captcha\", {\n                  rules: [\n                    {\n                      required: true,\n                      message: \"Please input the captcha you got!\"\n                    }\n                  ]\n                })(<Input size=\"large\" />)}\n              </Col>\n              <Col span={12}>\n                <Button size=\"large\">Get captcha</Button>\n              </Col>\n            </Row>\n          </FormItem>\n          <FormItem {...tailFormItemLayout} style={{ marginBottom: 8 }}>\n            {getFieldDecorator(\"agreement\", {\n              valuePropName: \"checked\"\n            })(\n              <Checkbox>\n                I have read the <a href=\"\">agreement</a>\n              </Checkbox>\n            )}\n          </FormItem>\n          <FormItem {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" block>\n              Sign Up!\n            </Button>\n          </FormItem>\n        </Form>\n      </MainLayout>\n    );\n  }\n}\n\nconst WrappedSignUpForm = Form.create()(SignUpForm);\n\nexport default WrappedSignUpForm;\n"]},"metadata":{},"sourceType":"module"}